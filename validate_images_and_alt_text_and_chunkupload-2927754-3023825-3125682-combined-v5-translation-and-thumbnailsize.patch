diff --git a/README.md b/README.md
index 696e212..5e25413 100644
--- a/README.md
+++ b/README.md
@@ -9,7 +9,8 @@ This is the Drupal integration for [DropzoneJS](http://www.dropzonejs.com/).
 1. Download this module
 2. [Download DropzoneJS](https://github.com/enyo/dropzone) and place it in the
    libraries folder
-3. Install dropzonejs the [usual way](https://www.drupal.org/docs/extending-drupal/installing-drupal-modules)
+3. Install dropzonejs the [usual way](https://www.drupal.org/docs/extending-drupal/installing-drupal-modules).
+   Note: version 5.7.0+ of the library is required when using chunked uploads.
 4. Remove "test" folder from libraries folder as it could constitute a
    security risk to your site. See http://drupal.org/node/1189632 for more info.
 
diff --git a/dropzonejs.libraries.yml b/dropzonejs.libraries.yml
index b113779..7df5267 100644
--- a/dropzonejs.libraries.yml
+++ b/dropzonejs.libraries.yml
@@ -18,12 +18,16 @@ widget:
       css/dropzone.widget.css: {}
 integration:
   version: VERSION
+  css:
+    theme:
+      css/dropzone.element.css: {}
   js:
     js/dropzone.integration.js: {}
   dependencies:
     - core/once
     - core/jquery
     - core/drupal
+    - core/drupal.ajax
     - core/drupalSettings
     - dropzonejs/dropzonejs
 
diff --git a/dropzonejs.routing.yml b/dropzonejs.routing.yml
index 05e084b..065d8f2 100644
--- a/dropzonejs.routing.yml
+++ b/dropzonejs.routing.yml
@@ -5,3 +5,17 @@ dropzonejs.upload:
   requirements:
     _permission: 'dropzone upload files'
     _csrf_token: 'TRUE'
+dropzonejs.chunked.upload:
+  path: '/dropzonejs/chunked/upload'
+  defaults:
+    _controller: '\Drupal\dropzonejs\Controller\ChunkedUploadController::handleUploads'
+  requirements:
+    _permission: 'dropzone upload files'
+    _csrf_token: 'TRUE'
+dropzonejs.chunked.finalize:
+  path: '/dropzonejs/chunked/finalize'
+  defaults:
+    _controller: '\Drupal\dropzonejs\Controller\ChunkedUploadController::finalizeUpload'
+  requirements:
+    _permission: 'dropzone upload files'
+    _csrf_token: 'TRUE'
diff --git a/dropzonejs.services.yml b/dropzonejs.services.yml
index 107421e..676dc31 100644
--- a/dropzonejs.services.yml
+++ b/dropzonejs.services.yml
@@ -5,3 +5,6 @@ services:
   dropzonejs.upload_handler:
     class: Drupal\dropzonejs\UploadHandler
     arguments: ['@request_stack', '@config.factory', '@transliteration', '@language_manager']
+  dropzonejs.chunked_upload_handler:
+    class: Drupal\dropzonejs\ChunkedUploadHandler
+    arguments: ['@request_stack', '@config.factory', '@transliteration', '@language_manager', '@file_system']
diff --git a/js/dropzone.integration.js b/js/dropzone.integration.js
index 30927d3..cedeedc 100644
--- a/js/dropzone.integration.js
+++ b/js/dropzone.integration.js
@@ -8,7 +8,42 @@
 (function ($, Drupal, drupalSettings) {
   'use strict';
 
-  Drupal.dropzonejsInstances = [];
+  Drupal.dropzonejs = Drupal.dropzonejs || {};
+
+  Drupal.dropzonejs.instances = {};
+
+  Drupal.dropzonejs.chunksUploaded = function (file, done, el) {
+    var selector = $(el);
+    var input = selector.siblings('input');
+    var url = input.attr('data-finalize-path');
+
+    // Send request to merge chunks for current file.
+    Drupal.ajax({
+      url: url,
+      base: false,
+      element: false,
+      progress: false,
+      submit: {
+        filename: file.upload.filename,
+        dzuuid: file.upload.uuid,
+        dztotalfilesize: file.size,
+        dztotalchunkcount: file.upload.totalChunkCount
+      },
+      success: function (response) {
+        // Call dropzone's done callback. (see https://www.dropzonejs.com/#config-chunksUploaded)
+        // The file is transliterated on upload. The element has to reflect
+        // the real filename.
+        file.processedName = response.result;
+
+        done();
+      },
+      error: function (xhr, url) {
+        var instance = Drupal.dropzonejs.instances[selector.attr('id')];
+        var response = $.parseJSON(xhr.responseText);
+        instance._errorProcessing([file], response.error, xhr);
+      }
+    }).execute();
+  };
 
   /* global Dropzone */
   Drupal.behaviors.dropzonejsIntegraion = {
@@ -46,6 +81,23 @@
         };
         var instanceConfig = drupalSettings.dropzonejs.instances[selector.attr('id')];
 
+        if (instanceConfig.chunking) {
+          var el = this;
+          config.chunksUploaded = function(file, done) {
+            Drupal.dropzonejs.chunksUploaded(file, done, el);
+          };
+        }
+
+        // Mininum resolution check, based on example from https://gitlab.com/meno/dropzone/-/wikis/FAQ#reject-images-based-on-image-dimensions
+        var minResConfig = {};
+        if (instanceConfig.min_resolution_x) {
+          minResConfig = {
+            accept: function(file, done) {
+              file.acceptDimensions = done;
+              file.rejectDimensions = function(dimensions) { done(Drupal.t("Invalid dimension. Minimum dimension: ")+dimensions);};
+            }
+          }
+        }
         // If DropzoneJS instance is already registered on Element. There is no
         // need to register it again.
         if ($(once('register-dropzonejs', selector)).length !== selector.length) {
@@ -59,7 +111,7 @@
         }
 
         // Initialize DropzoneJS instance for element.
-        var dropzoneInstance = new Dropzone('#' + selector.attr('id'), $.extend({}, instanceConfig, config));
+        var dropzoneInstance = new Dropzone('#' + selector.attr('id'), $.extend({}, instanceConfig, config, minResConfig));
 
         // Other modules might need instances.
         drupalSettings['dropzonejs']['instances'][selector.attr('id')]['instance'] = dropzoneInstance;
@@ -72,16 +124,78 @@
           });
         });
 
+        function processMetadata(file, uploadedFilesElement, id) {
+          var uploadedFilesValue =  uploadedFilesElement.attr('value');
+          var initial_fragment = uploadedFilesValue.slice(0,uploadedFilesValue.lastIndexOf(file.processedName));
+          var metadata_fragment = '';
+          var alt_input = jQuery('#alt_value_' + id);
+          var title_input = jQuery('#title_value_' + id);
+          var final_fragment = uploadedFilesValue.slice(uploadedFilesValue.lastIndexOf(file.processedName) + file.processedName.length, uploadedFilesValue.length);
+          var notification_element = jQuery('#upload_notification_' + id);
+
+          final_fragment = final_fragment.slice(final_fragment.indexOf(';'), uploadedFilesValue.length);
+          if (alt_input.length && alt_input.val()) {
+            metadata_fragment += '[ALT=' + alt_input.val() + ']';
+          }
+          if (title_input.length && title_input.val()) {
+            metadata_fragment += '[TITLE=' + title_input.val() + ']';
+          }
+          uploadedFilesElement.attr('value', initial_fragment + file.processedName + metadata_fragment + final_fragment);
+          if (notification_element.length) {
+            notification_element.show();
+          }
+        }
+
+        function unsetSaveNotification(id) {
+          var notification_element = jQuery('#upload_notification_' + id);
+
+          if (notification_element.length) {
+            notification_element.hide();
+          }
+        }
+
         // React on add file. Add only accepted files.
         dropzoneInstance.on('success', function (file, response) {
           var uploadedFilesElement = selector.siblings(':hidden');
           var currentValue = uploadedFilesElement.attr('value') || '';
 
-          // The file is transliterated on upload. The element has to reflect
-          // the real filename.
-          file.processedName = response.result;
+          if (instanceConfig.showAlt) {
+            file._altTextLabel = Dropzone.createElement('<label class="file_metadata_label file_alt_label">' + Drupal.t('Alt') + '</label>');
+            file._altText = Dropzone.createElement('<input type="text" class="file_metadata_input file_alt_input" id="alt_value_' + file.upload.uuid + '"/>');
+            file.previewElement.appendChild(file._altTextLabel);
+            file.previewElement.appendChild(file._altText);
+            $(file._altText).on('keyup change', function () {
+              unsetSaveNotification(file.upload.uuid);
+            });
+          }
+          if (instanceConfig.showTitle) {
+            file._titleTextLabel = Dropzone.createElement('<label class="file_metadata_label file_title_label">' + Drupal.t('Title') + '</label>');
+            file._titleText = Dropzone.createElement('<input type="text" class="file_metadata_input file_title_input" id="title_value_' + file.upload.uuid + '"/>');
+            file.previewElement.appendChild(file._titleTextLabel);
+            file.previewElement.appendChild(file._titleText);
+            $(file._titleText).on('keyup change', function () {
+              unsetSaveNotification(file.upload.uuid);
+            });
+          }
+          if (instanceConfig.showAlt || instanceConfig.showTitle) {
+            file._metadataSave = Dropzone.createElement('<input type="button" value="' + Drupal.t('Save metadata') + '" class="file_metadata_action file_metadata_save">');
+            file._metadataSaveNotification = Dropzone.createElement('<span id="upload_notification_' + file.upload.uuid + '" class="file_metadata_notification file_metadata_save_notification" style="display: none">' + Drupal.t('Saved') + '</span>');
+            file.previewElement.appendChild(file._metadataSave);
+            file.previewElement.appendChild(file._metadataSaveNotification);
+            $(file._metadataSave).on('click', function () {
+              processMetadata(file, uploadedFilesElement, file.upload.uuid);
+            });
+          }
+
+          // Chunked uplaods get an empty response.
+          // (see https://gitlab.com/meno/dropzone/-/blob/master/src/dropzone.js#L1978).
+          if (response) {
+            // The file is transliterated on upload. The element has to reflect
+            // the real filename.
+            file.processedName = response.result;
+          }
 
-          uploadedFilesElement.attr('value', currentValue + response.result + ';');
+          uploadedFilesElement.attr('value', currentValue + file.processedName + ';');
         });
 
         // React on file removing.
@@ -111,6 +225,31 @@
             dropzoneInstance.removeFile(rejectedFiles[i]);
           }
         });
+
+        // Rebuild Drupal core's minimum image resolution validation, as this
+        // does not get called in dropzone entity browser widgets
+        dropzoneInstance.on("thumbnail", function (file) {
+          var dimensions;
+          if (instanceConfig.min_resolution_x) {
+            dimensions = Drupal.t('width')+': '+instanceConfig.min_resolution_x+"px";
+            if (instanceConfig.min_resolution_y) {
+              dimensions = dimensions + ", "
+            }
+          }
+          if (instanceConfig.min_resolution_y) {
+            dimensions = dimensions + Drupal.t('height')+': '+instanceConfig.min_resolution_y+"px";
+          }
+          if ((instanceConfig.min_resolution_x && file.width < instanceConfig.min_resolution_x) || (instanceConfig.min_resolution_y) && file.height < instanceConfig.min_resolution_y) {
+            file.rejectDimensions(dimensions);
+          }
+          else {
+            if (typeof file.acceptDimensions !== "undefined") {
+              file.acceptDimensions();
+            }
+          }
+        });
+
+        Drupal.dropzonejs.instances[selector.attr('id')] = dropzoneInstance;
       });
     }
   };
diff --git a/modules/eb_widget/config/schema/dropzonejs_eb_widget.schema.yml b/modules/eb_widget/config/schema/dropzonejs_eb_widget.schema.yml
index ad564f5..e18735d 100644
--- a/modules/eb_widget/config/schema/dropzonejs_eb_widget.schema.yml
+++ b/modules/eb_widget/config/schema/dropzonejs_eb_widget.schema.yml
@@ -38,6 +38,27 @@ entity_browser.browser.widget.dropzonejs:
     thumbnail_method:
       type: string
       label: 'Method used for generating the thumbnail'
+    min_resolution:
+      type: string
+      label: 'Minimum image resolution'
+    chunking:
+      type: boolean
+      label: 'Enable chunked uploads'
+    force_chunking:
+      type: boolean
+      label: 'Force each upload to be chunked, even if the file size is below chunk_size'
+    chunk_size:
+      type: integer
+      label: 'The chunk size in bytes'
+    parallel_chunk_uploads:
+      type: boolean
+      label: 'Upload multiple chunks in parallel'
+    retry_chunks:
+      type: boolean
+      label: 'Whether a chunk upload should be retried if it fails'
+    retry_chunks_limit:
+      type: integer
+      label: 'Number of times a chunk upload should be retried'
 
 entity_browser.browser.widget.dropzonejs_media_entity:
   type: entity_browser.browser.widget.dropzonejs
diff --git a/modules/eb_widget/dropzonejs_eb_widget.install b/modules/eb_widget/dropzonejs_eb_widget.install
index d3de4ef..aef2d60 100644
--- a/modules/eb_widget/dropzonejs_eb_widget.install
+++ b/modules/eb_widget/dropzonejs_eb_widget.install
@@ -98,3 +98,36 @@ function dropzonejs_eb_widget_update_8202() {
     }
   }
 }
+
+/**
+ * Update configurations for new chunking keys.
+ */
+function dropzonejs_eb_widget_update_8203() {
+  /** @var \Drupal\entity_browser\Entity\EntityBrowser[] $entity_browsers */
+  $entity_browsers = EntityBrowser::loadMultiple();
+
+  foreach ($entity_browsers as $entity_browser) {
+    /** @var \Drupal\entity_browser\WidgetInterface[] $widgets */
+    $widgets = $entity_browser->getWidgets();
+
+    $has_config_changes = FALSE;
+    foreach ($widgets as $widget) {
+      if ($widget instanceof DropzoneJsEbWidget) {
+        $config = $widget->getConfiguration();
+
+        $config['settings']['chunking'] = FALSE;
+        $config['settings']['force_chunking'] = FALSE;
+        $config['settings']['chunk_size'] = 2000000;
+        $config['settings']['parallel_chunk_uploads'] = FALSE;
+        $config['settings']['retry_chunks'] = FALSE;
+        $config['settings']['retry_chunks_limit'] = 3;
+        $widget->setConfiguration($config);
+        $has_config_changes = TRUE;
+      }
+    }
+
+    if ($has_config_changes) {
+      $entity_browser->save();
+    }
+  }
+}
diff --git a/modules/eb_widget/src/Plugin/EntityBrowser/Widget/DropzoneJsEbWidget.php b/modules/eb_widget/src/Plugin/EntityBrowser/Widget/DropzoneJsEbWidget.php
index 121fe78..b338089 100644
--- a/modules/eb_widget/src/Plugin/EntityBrowser/Widget/DropzoneJsEbWidget.php
+++ b/modules/eb_widget/src/Plugin/EntityBrowser/Widget/DropzoneJsEbWidget.php
@@ -142,6 +142,12 @@ class DropzoneJsEbWidget extends WidgetBase {
       'resize_quality' => 1,
       'resize_method' => 'contain',
       'thumbnail_method' => 'contain',
+      'chunking' => FALSE,
+      'force_chunking' => FALSE,
+      'chunk_size' => 2000000,
+      'parallel_chunk_uploads' => FALSE,
+      'retry_chunks' => FALSE,
+      'retry_chunks_limit' => 3,
     ]);
   }
 
@@ -157,6 +163,7 @@ class DropzoneJsEbWidget extends WidgetBase {
       $cardinality = $validators['cardinality']['cardinality'];
     }
     $config = $this->getConfiguration();
+    $min_resolution = explode('x', $config['settings']['min_resolution']) + ['', ''];
     $form['upload'] = [
       '#title' => $this->t('File upload'),
       '#type' => 'dropzonejs',
@@ -166,6 +173,9 @@ class DropzoneJsEbWidget extends WidgetBase {
       '#extensions' => $config['settings']['extensions'],
       '#max_files' => ($cardinality > 0) ? $cardinality : 0,
       '#clientside_resize' => $config['settings']['clientside_resize'],
+      '#chunking' => $config['settings']['chunking'],
+      '#min_resolution_x' => $min_resolution[0],
+      '#min_resolution_y' => $min_resolution[1]
     ];
 
     if ($config['settings']['clientside_resize']) {
@@ -176,6 +186,14 @@ class DropzoneJsEbWidget extends WidgetBase {
       $form['upload']['#thumbnail_method'] = $config['settings']['thumbnail_method'];
     }
 
+    if ($config['settings']['chunking']) {
+      $form['upload']['#force_chunking'] = $config['settings']['force_chunking'];
+      $form['upload']['#chunk_size'] = $config['settings']['chunk_size'];
+      $form['upload']['#parallel_chunk_uploads'] = $config['settings']['parallel_chunk_uploads'];
+      $form['upload']['#retry_chunks'] = $config['settings']['retry_chunks'];
+      $form['upload']['#retry_chunks_limit'] = $config['settings']['retry_chunks_limit'];
+    }
+
     $form['#attached']['library'][] = 'dropzonejs/widget';
     // Disable the submit button until the upload sucesfully completed.
     $form['#attached']['library'][] = 'dropzonejs_eb_widget/common';
@@ -510,6 +528,105 @@ class DropzoneJsEbWidget extends WidgetBase {
       ]
     ];
 
+    $form['chunking'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Enable chunking'),
+      '#default_value' => $configuration['chunking'],
+    ];
+
+    $form['force_chunking'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Force chunking'),
+      '#default_value' => $configuration['force_chunking'],
+      '#states' => [
+        'visible' => [
+          ':input[name="table[' . $this->uuid() .  '][form][chunking]"]' => [
+            'checked' => TRUE,
+          ],
+        ],
+      ],
+    ];
+
+    $form['chunk_size'] = [
+      '#type' => 'number',
+      '#title' => $this->t('Chunk size'),
+      '#default_value' => $configuration['chunk_size'],
+      '#min' => 1,
+      '#states' => [
+        'visible' => [
+          ':input[name="table[' . $this->uuid() .  '][form][chunking]"]' => [
+            'checked' => TRUE,
+          ],
+        ],
+      ],
+    ];
+
+    $form['parallel_chunk_uploads'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Parallel chunk uploads'),
+      '#default_value' => $configuration['parallel_chunk_uploads'],
+      '#states' => [
+        'visible' => [
+          ':input[name="table[' . $this->uuid() .  '][form][chunking]"]' => [
+            'checked' => TRUE,
+          ],
+        ],
+      ],
+    ];
+
+    $form['retry_chunks'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Retry chunks'),
+      '#default_value' => $configuration['retry_chunks'],
+      '#states' => [
+        'visible' => [
+          ':input[name="table[' . $this->uuid() .  '][form][chunking]"]' => [
+            'checked' => TRUE,
+          ],
+        ],
+      ],
+    ];
+
+    $form['retry_chunks_limit'] = [
+      '#type' => 'number',
+      '#title' => $this->t('Retry chunks limit'),
+      '#default_value' => $configuration['retry_chunks_limit'],
+      '#states' => [
+        'visible' => [
+          ':input[name="table[' . $this->uuid() .  '][form][chunking]"]' => [
+            'checked' => TRUE,
+          ],
+        ],
+      ],
+    ];
+
+    $min_resolution = explode('x', $configuration['min_resolution']) + ['', ''];
+    $form['min_resolution'] = [
+      '#type' => 'item',
+      '#title' => t('Minimum image resolution'),
+      '#element_validate' => [['Drupal\image\Plugin\Field\FieldType\ImageItem', 'validateResolution']],
+      '#weight' => 4.2,
+      '#description' => t('The minimum allowed image size expressed as WIDTH×HEIGHT (e.g. 640×480). Leave blank for no restriction. If a smaller image is uploaded, it will be rejected.'),
+    ];
+    $form['min_resolution']['x'] = [
+      '#type' => 'number',
+      '#title' => t('Minimum width'),
+      '#title_display' => 'invisible',
+      '#default_value' => $min_resolution[0],
+      '#min' => 1,
+      '#field_suffix' => ' × ',
+      '#prefix' => '<div class="form--inline clearfix">',
+    ];
+    $form['min_resolution']['y'] = [
+      '#type' => 'number',
+      '#title' => t('Minimum height'),
+      '#title_display' => 'invisible',
+      '#default_value' => $min_resolution[1],
+      '#min' => 1,
+      '#field_suffix' => ' ' . t('pixels'),
+      '#suffix' => '</div>',
+    ];
+
     return $form;
   }
 
diff --git a/src/Element/DropzoneJs.php b/src/Element/DropzoneJs.php
index 298b29e..429ce76 100644
--- a/src/Element/DropzoneJs.php
+++ b/src/Element/DropzoneJs.php
@@ -34,6 +34,9 @@ use Drupal\Core\Url;
  * - #clientside_resize (bool)
  *   Whether or not to use DropzoneJS clientside resizing. It requires v4.4.0+
  *   version of the library.
+ * - #chunking (bool)
+ *   Whether or not to use DropzoneJS chunking. It requires v5.7.0+
+ *   version of the library.
  *
  * Optional options are:
  * - #resize_width (integer)
@@ -49,6 +52,24 @@ use Drupal\Core\Url;
  * - #thumbnail_method (string).
  *   (optional) Accepts 'contain', which scales the image, or 'crop' which crops
  *   the image. Defaults to 'contain'.
+ * - #show_alt (boolean).
+ *   (optional) TRUE if alt text input should be shown.
+ * - #show_title (boolean).
+ *   (optional) TRUE if title text input should be shown.
+ * - #force_chunking (bool).
+ *   (optional) Whether or not to force chunking even if the file size is below
+ *   chunk_size. Defaults to false.
+ * - #chunk_size (integer).
+ *   (optional) The chunk size in bytes. Defaults to 2000000.
+ * - #parallel_chunk_uploads (bool).
+ *   (optional) Whether or not individual chunks of a file can be uplaoded
+ *   in parallel. Defaults to false.
+ * - #retry_chunks (bool).
+ *   (optional) Whether or not a chunk should be retried if it fails.
+ *   Defaults to false.
+ * - #retry_chunks_limit (integer).
+ *   (optional) The number of times a chunk should be retried.
+ *   Defaults to 3.
  *
  * @todo Not sure about the version for clientside.
  *
@@ -61,10 +82,20 @@ use Drupal\Core\Url;
 class DropzoneJs extends FormElement {
 
   /**
-   * A defualut set of valid extensions.
+   * A default set of valid extensions.
    */
   const DEFAULT_VALID_EXTENSIONS = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
 
+  /**
+   * A regex pattern to match the title metadata
+   */
+  const TITLE_METADATA_REGEX = '/\\[TITLE=([^\\]]+)\\]/';
+
+  /**
+   * A regex pattern to match the alt text metadata
+   */
+  const ALT_METADATA_REGEX = '/\\[ALT=([^\\]]+)\\]/';
+
   /**
    * {@inheritdoc}
    */
@@ -97,6 +128,17 @@ class DropzoneJs extends FormElement {
     ];
     // Apply cacheable metadata to element.
     $generated_url->applyTo($element);
+
+    // If we send a url with a token through drupalSettings the placeholder
+    // doesn't get replaced, because the actual scripts markup is not there
+    // yet. So we pass this information through a data attribute.
+    if (!empty($element['#chunking'])) {
+      $element['uploaded_files']['#attributes'] = [
+        'data-upload-path' => Url::fromRoute('dropzonejs.chunked.upload')->toString(),
+        'data-finalize-path' => Url::fromRoute('dropzonejs.chunked.finalize')->toString(),
+      ];
+    }
+
     if (empty($element['#max_filesize'])) {
       $element['#max_filesize'] = Environment::getUploadMaxSize();
     }
@@ -141,6 +183,10 @@ class DropzoneJs extends FormElement {
           'acceptedFiles' => '.' . str_replace(' ', ',.', self::getValidExtensions($element)),
           'maxFiles' => $element['#max_files'],
           'timeout' => \Drupal::configFactory()->get('dropzonejs.settings')->get('upload_timeout_ms'),
+          'min_resolution_x' => isset($element['#min_resolution_x']) ? $element['#min_resolution_x'] : FALSE,
+          'min_resolution_y' => isset($element['#min_resolution_y']) ? $element['#min_resolution_y'] : FALSE,
+          'showAlt' => !empty($element['#show_alt']) ? $element['#show_alt'] : FALSE,
+          'showTitle' => !empty($element['#show_title']) ? $element['#show_title'] : FALSE,
         ],
       ],
     ];
@@ -156,6 +202,17 @@ class DropzoneJs extends FormElement {
       array_unshift($element['#attached']['library'], 'dropzonejs/exif-js');
     }
 
+    if (!empty($element['#chunking'])) {
+      $element['#attached']['drupalSettings']['dropzonejs']['instances'][$element['#id']] += [
+        'chunking' => $element['#chunking'],
+        'forceChunking' => !empty($element['#force_chunking']) ? $element['#force_chunking'] : FALSE,
+        'chunkSize' => !empty($element['#chunk_size']) ? $element['#chunk_size'] : 2000000,
+        'parallelChunkUploads' => !empty($element['#parallel_chunk_uploads']) ? $element['#parallel_chunk_uploads'] : FALSE,
+        'retryChunks' => !empty($element['#retry_chunks']) ? $element['#retry_chunks'] : FALSE,
+        'retryChunksLimit' => !empty($element['#retry_chunks_limit']) ? $element['#retry_chunks_limit'] : 3,
+      ];
+    }
+
     static::setAttributes($element, ['dropzone-enable']);
     return $element;
   }
@@ -174,6 +231,9 @@ class DropzoneJs extends FormElement {
         $tmp_upload_scheme = \Drupal::configFactory()->get('dropzonejs.settings')->get('tmp_upload_scheme');
 
         foreach ($file_names as $name) {
+          // Extract the metadata (alt, title) if present.
+          $metadata = static::extractAndRemoveMetadataFromFilename($name);
+
           // The upload handler appended the txt extension to the file for
           // security reasons. We will remove it in this callback.
           $old_filepath = $tmp_upload_scheme . '://' . $name;
@@ -199,6 +259,7 @@ class DropzoneJs extends FormElement {
               $return['uploaded_files'][] = [
                 'path' => $move_result,
                 'filename' => $name,
+                'metadata' => $metadata,
               ];
             }
             else {
@@ -243,4 +304,34 @@ class DropzoneJs extends FormElement {
     return implode('.', $parts);
   }
 
+  /**
+   * Extract and remove the metadata from the filename.
+   *
+   * @param $fileName
+   *   The filename that contains the metadata.
+   *
+   * @return array
+   *   The metadata.
+   */
+  protected static function extractAndRemoveMetadataFromFilename(&$fileName) {
+    $metadata = [
+      'title' => '',
+      'alt' => '',
+    ];
+
+    preg_match(self::TITLE_METADATA_REGEX, $fileName, $matchResult);
+    if (isset($matchResult[1]) && $matchResult[1] !== '') {
+      $metadata['title'] = $matchResult[1];
+      $fileName = preg_replace(self::TITLE_METADATA_REGEX, '', $fileName);
+    }
+
+    preg_match(self::ALT_METADATA_REGEX, $fileName, $matchResult);
+    if (isset($matchResult[1]) && $matchResult[1] !== '') {
+      $metadata['alt'] = $matchResult[1];
+      $fileName = preg_replace(self::ALT_METADATA_REGEX, '', $fileName);
+    }
+
+    return $metadata;
+  }
+
 }
diff --git a/src/UploadException.php b/src/UploadException.php
index bb5a533..335c657 100644
--- a/src/UploadException.php
+++ b/src/UploadException.php
@@ -39,6 +39,11 @@ class UploadException extends \Exception {
    */
   const FILE_UPLOAD_ERROR = 106;
 
+  /**
+   * Chunks assembly resulted in error.
+   */
+  const ASSEMBLE_CHUNKS_ERROR = 107;
+
   /**
    * Code to error message mapping.
    *
@@ -51,6 +56,7 @@ class UploadException extends \Exception {
     self::DESTINATION_FOLDER_ERROR => 'Failed to open temporary directory for write.',
     self::FILENAME_ERROR => 'Invalid temporary file name.',
     self::FILE_UPLOAD_ERROR => 'The file upload resulted in an error on php level. See http://php.net/manual/en/features.file-upload.errors.php',
+    self::ASSEMBLE_CHUNKS_ERROR => 'Failed to assemble chunks.',
   ];
 
   /**
diff --git a/src/UploadHandler.php b/src/UploadHandler.php
index 093845e..320ebab 100644
--- a/src/UploadHandler.php
+++ b/src/UploadHandler.php
@@ -72,9 +72,7 @@ class UploadHandler implements UploadHandlerInterface {
   /**
    * {@inheritdoc}
    */
-  public function getFilename(UploadedFile $file) {
-    $original_name = $file->getClientOriginalName();
-
+  public function getFilename($original_name) {
     // There should be a filename and it should not contain a semicolon,
     // which we use to separate filenames.
     if (!isset($original_name)) {
@@ -138,7 +136,7 @@ class UploadHandler implements UploadHandlerInterface {
     }
 
     // Open temp file.
-    $tmp = $this->dropzoneSettings->get('tmp_upload_scheme') . '://' . $this->getFilename($file);
+    $tmp = $this->dropzoneSettings->get('tmp_upload_scheme') . '://' . $this->getFilename($file->getClientOriginalName());
     if (!($out = fopen($tmp, $this->request->request->get('chunk', 0) ? 'ab' : 'wb'))) {
       throw new UploadException(UploadException::OUTPUT_ERROR);
     }
diff --git a/src/UploadHandlerInterface.php b/src/UploadHandlerInterface.php
index d4a196c..f6cd8e8 100644
--- a/src/UploadHandlerInterface.php
+++ b/src/UploadHandlerInterface.php
@@ -10,17 +10,17 @@ use Symfony\Component\HttpFoundation\File\UploadedFile;
 interface UploadHandlerInterface {
 
   /**
-   * Reads, checks and return filename of a file being uploaded.
+   * Sanitizes the filename of the uploaded file.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $file
-   *   An instance of UploadedFile.
+   * @param string $original_name
+   *   The original filename.
    *
    * @return string
    *   The sanitized filename.
    *
    * @throws \Drupal\dropzonejs\UploadException
    */
-  public function getFilename(UploadedFile $file);
+  public function getFilename($original_name);
 
   /**
    * Handles an uploaded file.
diff --git a/tests/modules/dropzonejs_test/config/install/entity_browser.browser.dropzonejs_eb_test.yml b/tests/modules/dropzonejs_test/config/install/entity_browser.browser.dropzonejs_eb_test.yml
index 8c0fd40..6e60152 100644
--- a/tests/modules/dropzonejs_test/config/install/entity_browser.browser.dropzonejs_eb_test.yml
+++ b/tests/modules/dropzonejs_test/config/install/entity_browser.browser.dropzonejs_eb_test.yml
@@ -32,6 +32,12 @@ widgets:
       resize_quality: !!float 1
       resize_method: contain
       thumbnail_method: contain
+      chunking: false
+      force_chunking: false
+      chunk_size: 2000000
+      parallel_chunk_uploads: false
+      retry_chunks: false
+      retry_chunks_limit: 3
       submit_text: 'Select entities'
       auto_select: false
     uuid: 44b1e6ea-637d-4dd6-b79e-edeefc546c1c
