diff --git a/config/schema/entity_browser.schema.yml b/config/schema/entity_browser.schema.yml
index 84ff907..80619ec 100644
--- a/config/schema/entity_browser.schema.yml
+++ b/config/schema/entity_browser.schema.yml
@@ -166,6 +166,9 @@ field.widget.settings.entity_browser_entity_reference:
     field_widget_edit:
       type: boolean
       label: 'Field widget edit'
+    field_widget_edit_form_mode:
+      type: string
+      label: 'Field widget edit form mode'
     field_widget_remove:
       type: boolean
       label: 'Field widget remove'
@@ -180,6 +183,9 @@ field.widget.settings.entity_browser_entity_reference:
     selection_mode:
       type: string
       label: 'Selection mode'
+    show_messages:
+      type: boolean
+      label: 'Show messages'
 
 entity_browser.field_widget_display.label:
   type: mapping
@@ -211,6 +217,9 @@ field.widget.settings.entity_browser_file:
     field_widget_edit:
       type: boolean
       label: 'Field widget edit'
+    field_widget_edit_form_mode:
+      type: string
+      label: 'Field widget edit form mode'
     field_widget_remove:
       type: boolean
       label: 'Field widget remove'
diff --git a/entity_browser.module b/entity_browser.module
index ea32040..493ff6c 100644
--- a/entity_browser.module
+++ b/entity_browser.module
@@ -71,17 +71,23 @@ function entity_browser_theme() {
  */
 function entity_browser_form_alter(&$form, FormStateInterface &$form_state) {
   $entity_browser_dialog_edit = \Drupal::service('request_stack')->getCurrentRequest()->get('_route');
-  if ($entity_browser_dialog_edit == 'entity_browser.edit_form' && $form_state->getFormObject() instanceof EntityForm) {
+  $form_mode = \Drupal::service('request_stack')->getCurrentRequest()->get('form_mode');
+  if ($entity_browser_dialog_edit === 'entity_browser.edit_form' && $form_state->getFormObject() instanceof EntityForm) {
     // Let's allow the save button only.
     foreach (Element::children($form['actions']) as $key) {
       $form['actions'][$key]['#access'] = $key == 'submit';
     }
     // Use Ajax.
     $form['actions']['submit']['#ajax'] = [
-      'url' => Url::fromRoute('entity_browser.edit_form', ['entity_type' => $form_state->getFormObject()->getEntity()->getEntityTypeId(), 'entity' => $form_state->getFormObject()->getEntity()->id()]),
+      'url' => Url::fromRoute('entity_browser.edit_form', [
+        'entity_type' => $form_state->getFormObject()->getEntity()->getEntityTypeId(),
+        'entity' => $form_state->getFormObject()->getEntity()->id(),
+        'form_mode' => $form_mode,
+      ]),
       'options' => [
         'query' => [
           'details_id' => \Drupal::request()->query->get('details_id'),
+          'show_messages' => \Drupal::request()->query->get('show_messages'),
         ],
       ],
       'disable-refocus' => TRUE,
@@ -109,6 +115,31 @@ function entity_browser_preprocess_page__entity_browser__iframe(&$variables) {
   }
 }
 
+
+/**
+ * Implements hook_entity_type_build().
+ *
+ * Register all form modes for an entity_type.
+ *
+ * @param array $entity_types
+ *    Definition of all content entity types.
+ */
+function entity_browser_entity_type_build(array &$entity_types) {
+  // Manually load all form modes via configuration instead of using
+  // \Drupal::service('entity_display.repository')->getAllFormModes() because
+  // it also needs to ensure the entity types are loaded, which causes a
+  // circular loop and possible errors.
+  $form_mode_ids = \Drupal::configFactory()->listAll('core.entity_form_mode.');
+  $form_modes = \Drupal::configFactory()->loadMultiple($form_mode_ids);
+
+  foreach ($form_modes as $form_mode) {
+    [$entity_type, $form_mode_id] = explode('.', $form_mode->get('id'), 2);
+    if (isset($entity_types[$entity_type]) && $form_mode->get('status') && !$entity_types[$entity_type]->getFormClass($form_mode_id) && $class = $entity_types[$entity_type]->getFormClass('default')) {
+      $entity_types[$entity_type]->setFormClass($form_mode_id, $class);
+    }
+  }
+}
+
 /**
  * Implements hook_preprocess_page__entity_browser__modal().
  *
diff --git a/entity_browser.routing.yml b/entity_browser.routing.yml
index 13162b1..48190cc 100644
--- a/entity_browser.routing.yml
+++ b/entity_browser.routing.yml
@@ -2,9 +2,10 @@ route_callbacks:
   - 'entity_browser.route_subscriber:routes'
 
 entity_browser.edit_form:
-  path: /entity_browser/{entity_type}/{entity}/edit
+  path: /entity_browser/{entity_type}/{entity}/edit/{form_mode}
   defaults:
     _controller: '\Drupal\entity_browser\Controllers\EntityBrowserController::entityBrowserEdit'
+    form_mode: 'default'
   requirements:
     _entity_access: 'entity.update'
   options:
diff --git a/src/Controllers/EntityBrowserController.php b/src/Controllers/EntityBrowserController.php
index 06206fe..208f097 100644
--- a/src/Controllers/EntityBrowserController.php
+++ b/src/Controllers/EntityBrowserController.php
@@ -6,8 +6,9 @@ use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseDialogCommand;
 use Drupal\Core\Ajax\OpenDialogCommand;
 use Drupal\Core\Controller\ControllerBase;
-use Drupal\Core\Form\FormState;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Form\FormState;
 use Drupal\entity_browser\Ajax\ValueUpdatedCommand;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Ajax\AlertCommand;
@@ -23,6 +24,8 @@ class EntityBrowserController extends ControllerBase {
    *
    * @param \Drupal\Core\Entity\EntityInterface $entity
    *   An entity being edited.
+   * @param string $form_mode
+   *   The form mode to use for the entity edit form.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The currently processing request.
    *
@@ -30,10 +33,9 @@ class EntityBrowserController extends ControllerBase {
    *   An Ajax response with a command for opening or closing the dialog
    *   containing the edit form.
    */
-  public function entityBrowserEdit(EntityInterface $entity, Request $request) {
-
+  public function entityBrowserEdit(EntityInterface $entity, string $form_mode, Request $request) {
     $trigger_name = $request->request->get('_triggering_element_name');
-    $edit_button = (strpos($trigger_name, 'edit_button') !== FALSE);
+    $edit_button = strpos($trigger_name, '_edit_button_') !== FALSE;
 
     if ($edit_button) {
       // Remove posted values from original form to prevent
@@ -42,18 +44,14 @@ class EntityBrowserController extends ControllerBase {
       $request->request = new ParameterBag();
     }
 
-    // Use edit form class if it exists, otherwise use default form class.
+    // Make sure the entity has an edit/default form class.
     $entity_type = $entity->getEntityType();
-    if ($entity_type->getFormClass('edit')) {
-      $operation = 'edit';
-    }
-    elseif ($entity_type->getFormClass('default')) {
-      $operation = 'default';
-    }
+    if ($entity_type
+      ->getFormClass('edit') || $entity_type
+      ->getFormClass('default')) {
 
-    if (!empty($operation)) {
       // Build the entity edit form.
-      $form_object = $this->entityTypeManager()->getFormObject($entity->getEntityTypeId(), $operation);
+      $form_object = $this->entityTypeManager()->getFormObject($entity->getEntityTypeId(), $form_mode);
       $form_object->setEntity($entity);
       $form_state = (new FormState())
         ->setFormObject($form_object)
@@ -65,14 +63,19 @@ class EntityBrowserController extends ControllerBase {
     // Restore original request now that the edit form is built.
     // This fixes a bug where closing modal and re-opening it would
     // cause two modals to open.
-    if ($edit_button) {
+    if (isset($original_request)) {
       $request->request = $original_request;
     }
 
     // Return a response, depending on whether it's successfully submitted.
-    if ($operation && $form_state && !$form_state->isExecuted()) {
+    if ($form_state && !$form_state->isExecuted()) {
       // Return the form as a modal dialog.
       $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
+      $form['messages'] = [
+        '#type' => 'status_messages',
+        '#weight' => -10000,
+        '#access' => (bool) $this->messenger()->all(),
+      ];
       $title = $this->t('Edit @entity', ['@entity' => $entity->label()]);
       $response = (new AjaxResponse())->addCommand(new OpenDialogCommand('#' . $entity->getEntityTypeId() . '-' . $entity->id() . '-edit-dialog', $title, $form, ['modal' => TRUE, 'width' => 800]));
       return $response;
@@ -82,11 +85,16 @@ class EntityBrowserController extends ControllerBase {
       $response = (new AjaxResponse())->addCommand(new CloseDialogCommand('#' . $entity->getEntityTypeId() . '-' . $entity->id() . '-edit-dialog'));
       // Also refresh the widget if "details_id" is provided.
       $details_id = $request->query->get('details_id');
+      $show_messages = $request->query->get('show_messages');
       if (!empty($details_id)) {
         $response->addCommand(new ValueUpdatedCommand($details_id));
-
-        if (empty($operation)) {
-          $response->addCommand(new AlertCommand($this->t("An edit form couldn't be found.")));
+        $messages = [
+          '#type' => 'status_messages',
+          '#weight' => -10000,
+          '#access' => (bool) $this->messenger()->all(),
+        ];
+        if (!empty($show_messages) && $this->messenger()->all()) {
+          $response->addCommand(new OpenDialogCommand('#eb-messages-modal', $this->t('Messages'), $messages, ['modal' => TRUE, 'width' => '50%']));
         }
       }
 
diff --git a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
index 42c9da7..8418066 100644
--- a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
@@ -2,28 +2,21 @@
 
 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;
 
-use Drupal\Core\Entity\EntityInterface;
-use Drupal\entity_browser\Element\EntityBrowserElement;
-use Drupal\entity_browser\Entity\EntityBrowser;
-use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Validation\Plugin\Validation\Constraint\NotNullConstraint;
-use Drupal\entity_browser\FieldWidgetDisplayManager;
+use Drupal\entity_browser\Element\EntityBrowserElement;
+use Drupal\entity_browser\Entity\EntityBrowser;
+use Drupal\entity_browser\Plugin\EntityBrowser\FieldWidgetDisplay\RenderedEntity;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Validator\ConstraintViolation;
 use Symfony\Component\Validator\ConstraintViolationListInterface;
-use Drupal\Core\Extension\ModuleHandlerInterface;
-use Drupal\Core\Session\AccountInterface;
-use Drupal\Core\Messenger\MessengerInterface;
 
 /**
  * Plugin implementation of the 'entity_reference' widget for entity browser.
@@ -38,7 +31,7 @@ use Drupal\Core\Messenger\MessengerInterface;
  *   }
  * )
  */
-class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactoryPluginInterface {
+class EntityReferenceBrowserWidget extends WidgetBase {
 
   /**
    * Entity type manager service.
@@ -78,54 +71,24 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   protected $currentUser;
 
   /**
-   * Constructs widget plugin.
+   * The entity display repository.
    *
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
-   *   The definition of the field to which the widget is associated.
-   * @param array $settings
-   *   The widget settings.
-   * @param array $third_party_settings
-   *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   Entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
-   *   Field widget display plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   *   The messenger.
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MessengerInterface $messenger) {
-    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
-    $this->entityTypeManager = $entity_type_manager;
-    $this->fieldDisplayManager = $field_display_manager;
-    $this->moduleHandler = $module_handler;
-    $this->currentUser = $current_user;
-    $this->messenger = $messenger;
-  }
+  protected $entityDisplayRepository;
 
   /**
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    return new static(
-      $plugin_id,
-      $plugin_definition,
-      $configuration['field_definition'],
-      $configuration['settings'],
-      $configuration['third_party_settings'],
-      $container->get('entity_type.manager'),
-      $container->get('plugin.manager.entity_browser.field_widget_display'),
-      $container->get('module_handler'),
-      $container->get('current_user'),
-      $container->get('messenger')
-    );
+    $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
+    $instance->entityTypeManager = $container->get('entity_type.manager');
+    $instance->fieldDisplayManager = $container->get('plugin.manager.entity_browser.field_widget_display');
+    $instance->moduleHandler = $container->get('module_handler');
+    $instance->currentUser = $container->get('current_user');
+    $instance->messenger = $container->get('messenger');
+    $instance->entityDisplayRepository = $container->get('entity_display.repository');
+    return $instance;
   }
 
   /**
@@ -137,10 +100,12 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
       'open' => FALSE,
       'field_widget_display' => 'label',
       'field_widget_edit' => TRUE,
+      'field_widget_edit_form_mode' => 'default',
       'field_widget_remove' => TRUE,
       'field_widget_replace' => FALSE,
       'field_widget_display_settings' => [],
       'selection_mode' => EntityBrowserElement::SELECTION_MODE_APPEND,
+      'show_messages' => FALSE,
     ] + parent::defaultSettings();
   }
 
@@ -163,8 +128,9 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
       '#options' => $browsers,
     ];
 
-    $target_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
+    $target_type = $this->getFieldSetting('target_type');
     $entity_type = $this->entityTypeManager->getStorage($target_type)->getEntityType();
+    $field_name = $this->fieldDefinition->getName();
 
     $displays = [];
     foreach ($this->fieldDisplayManager->getDefinitions() as $id => $definition) {
@@ -173,7 +139,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
       }
     }
 
-    $id = Html::getId($this->fieldDefinition->getName()) . '-field-widget-display-settings-ajax-wrapper-' . md5($this->fieldDefinition->getUniqueIdentifier());
+    $id = Html::getId($field_name) . '-field-widget-display-settings-ajax-wrapper-' . md5($this->fieldDefinition->getUniqueIdentifier());
     $element['field_widget_display'] = [
       '#title' => $this->t('Entity display plugin'),
       '#type' => 'radios',
@@ -201,7 +167,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
           $form_state->getValue(
             [
               'fields',
-              $this->fieldDefinition->getName(),
+              $field_name,
               'settings_edit_form',
               'settings',
               'field_widget_display',
@@ -211,30 +177,35 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
           $form_state->getValue(
             [
               'fields',
-              $this->fieldDefinition->getName(),
+              $field_name,
               'settings_edit_form',
               'settings',
               'field_widget_display_settings',
             ],
             $this->getSetting('field_widget_display_settings')
           ) + [
-            'entity_type' => $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type'),
+            'entity_type' => $target_type,
           ]
         )
         ->settingsForm($form, $form_state);
     }
 
-    $edit_button_access = TRUE;
-    if ($entity_type->id() == 'file') {
-      // For entities of type "file", it only makes sense to have the edit
-      // button if the module "file_entity" is present.
-      $edit_button_access = $this->moduleHandler->moduleExists('file_entity');
-    }
     $element['field_widget_edit'] = [
       '#title' => $this->t('Display Edit button'),
       '#type' => 'checkbox',
       '#default_value' => $this->getSetting('field_widget_edit'),
-      '#access' => $edit_button_access,
+      '#access' => $this->canUseEditButton($target_type),
+    ];
+    $element['field_widget_edit_form_mode'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Edit Form Mode'),
+      '#options' => $this->entityDisplayRepository->getFormModeOptions($target_type),
+      '#default_value' => $this->getSetting('field_widget_edit_form_mode'),
+      '#states' => [
+        'visible' => [
+          ':input[name="fields[' . $field_name . '][settings_edit_form][settings][field_widget_edit]"]' => ['checked' => TRUE],
+        ],
+      ],
     ];
 
     $element['field_widget_remove'] = [
@@ -265,6 +236,12 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
       '#default_value' => $this->getSetting('selection_mode'),
     ];
 
+    $element['show_messages'] = [
+      '#title' => $this->t('Show messages after auto closing entity browser.'),
+      '#type' => 'checkbox',
+      '#default_value' => $this->getSetting('show_messages'),
+    ];
+
     $element['#element_validate'] = [[get_class($this), 'validateSettingsForm']];
 
     return $element;
@@ -308,20 +285,30 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   public function settingsSummary() {
     $summary = $this->summaryBase();
     $field_widget_display = $this->getSetting('field_widget_display');
+    $target_type = $this->getFieldSetting('target_type');
 
     if (!empty($field_widget_display)) {
       $pluginDefinition = $this->fieldDisplayManager->getDefinition($field_widget_display);
       $field_widget_display_settings = $this->getSetting('field_widget_display_settings');
       $field_widget_display_settings += [
-        'entity_type' => $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type'),
+        'entity_type' => $target_type,
       ];
+      /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $plugin */
       $plugin = $this->fieldDisplayManager->createInstance($field_widget_display, $field_widget_display_settings);
       $summary[] = $this->t('Entity display: @name', ['@name' => $pluginDefinition['label']]);
-      if ($field_widget_display == 'rendered_entity') {
+      if ($plugin instanceof RenderedEntity) {
         $view_mode_label = $plugin->getViewModeLabel();
         $summary[] = $this->t('View Mode: @view_mode', ['@view_mode' => $view_mode_label]);
       }
     }
+    if ($this->getSetting('show_messages')) {
+      $summary[] = $this->t('Show messages');
+    }
+    if ($this->getSetting('field_widget_edit')) {
+      $edit_mode = $this->getSetting('field_widget_edit_form_mode');
+      $edit_mode_options = $this->entityDisplayRepository->getFormModeOptions($target_type);
+      $summary[] = $this->t('Edit Mode: @edit_mode', ['@edit_mode' => $edit_mode_options[$edit_mode] ?? $edit_mode]);
+    }
     return $summary;
   }
 
@@ -568,11 +555,11 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
    */
   protected function displayCurrentSelection($details_id, array $field_parents, array $entities) {
 
-    $target_entity_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
+    $target_entity_type = $this->getFieldSetting('target_type');
 
     $field_widget_display = $this->fieldDisplayManager->createInstance(
       $this->getSetting('field_widget_display'),
-      $this->getSetting('field_widget_display_settings') + ['entity_type' => $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type')]
+      $this->getSetting('field_widget_display_settings') + ['entity_type' => $target_entity_type]
     );
 
     $classes = [
@@ -594,13 +581,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
       'items' => array_map(
         function (ContentEntityInterface $entity, $row_id) use ($field_widget_display, $details_id, $field_parents, $replace_button_access) {
           $display = $field_widget_display->view($entity);
-          $edit_button_access = $this->getSetting('field_widget_edit') && $entity->access('update', $this->currentUser);
-          if ($entity->getEntityTypeId() == 'file') {
-            // On file entities, the "edit" button shouldn't be visible unless
-            // the module "file_entity" is present, which will allow them to be
-            // edited on their own form.
-            $edit_button_access &= $this->moduleHandler->moduleExists('file_entity');
-          }
+          $edit_button_access = $this->getSetting('field_widget_edit') && $this->canUseEditButton($entity->getEntityTypeId()) && $entity->access('update', $this->currentUser);
           if (is_string($display)) {
             $display = ['#markup' => $display];
           }
@@ -650,16 +631,19 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
               '#type' => 'submit',
               '#value' => $this->t('Edit'),
               '#name' => $this->fieldDefinition->getName() . '_edit_button_' . $entity->id() . '_' . $row_id . '_' . md5(json_encode($field_parents)),
+              '#limit_validation_errors' => [array_merge($field_parents, [$this->fieldDefinition->getName()])],
               '#ajax' => [
                 'url' => Url::fromRoute(
                   'entity_browser.edit_form', [
                     'entity_type' => $entity->getEntityTypeId(),
                     'entity' => $entity->id(),
+                    'form_mode' => $this->getSetting('field_widget_edit_form_mode'),
                   ]
                 ),
                 'options' => [
                   'query' => [
                     'details_id' => $details_id,
+                    'show_messages' => $this->getSetting('show_messages'),
                   ],
                 ],
               ],
@@ -793,7 +777,7 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
    */
   protected function formElementEntities(FieldItemListInterface $items, array $element, FormStateInterface $form_state) {
     $entities = [];
-    $entity_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
+    $entity_type = $this->getFieldSetting('target_type');
     $entity_storage = $this->entityTypeManager->getStorage($entity_type);
 
     // Find IDs from target_id element (it stores selected entities in form).
@@ -926,4 +910,21 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
     return FALSE;
   }
 
+  /**
+   * Checks if an edit button can be used for an entity type.
+   *
+   * This requires the entity type definition to have a 'default' form class.
+   * Most entity types in core do have this, but file entities will not have
+   * it without the file_entity module being installed.
+   *
+   * @param string $entity_type_id
+   *   The entity type ID.
+   *
+   * @return bool
+   *   TRUE if an edit button can be used or FALSE otherwise.
+   */
+  protected function canUseEditButton($entity_type_id) {
+    return (bool) $this->entityTypeManager->getDefinition($entity_type_id)->getFormClass('default');
+  }
+
 }
diff --git a/src/Plugin/Field/FieldWidget/FileBrowserWidget.php b/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
index 84e4d51..1b02bbf 100644
--- a/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
@@ -3,22 +3,13 @@
 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;
 
 use Drupal\Component\Utility\Bytes;
+use Drupal\Component\Utility\Environment;
 use Drupal\Component\Utility\SortArray;
-use Drupal\Core\Config\ConfigFactoryInterface;
-use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Extension\ModuleHandlerInterface;
-use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
-use Drupal\entity_browser\FieldWidgetDisplayManager;
 use Drupal\image\Entity\ImageStyle;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Drupal\Core\Session\AccountInterface;
-use Drupal\Component\Utility\Environment;
-use Symfony\Component\Mime\MimeTypeGuesserInterface;
 
 /**
  * Entity browser file widget.
@@ -57,13 +48,6 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
    */
   protected $configFactory;
 
-  /**
-   * The display repository service.
-   *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
-   */
-  protected $displayRepository;
-
   /**
    * The mime type guesser service.
    *
@@ -71,64 +55,14 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
    */
   protected $mimeTypeGuesser;
 
-  /**
-   * Constructs widget plugin.
-   *
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
-   *   The definition of the field to which the widget is associated.
-   * @param array $settings
-   *   The widget settings.
-   * @param array $third_party_settings
-   *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   Entity type manager service.
-   * @param \Drupal\entity_browser\FieldWidgetDisplayManager $field_display_manager
-   *   Field widget display plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   *   The config factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository
-   *   The entity display repository service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   *   The messenger.
-   * @param \Symfony\Component\Mime\MimeTypeGuesserInterface $mime_type_guesser
-   *   The mime type guesser service.
-   */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger) {
-    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings, $entity_type_manager, $field_display_manager, $module_handler, $current_user, $messenger);
-    $this->entityTypeManager = $entity_type_manager;
-    $this->fieldDisplayManager = $field_display_manager;
-    $this->configFactory = $config_factory;
-    $this->displayRepository = $display_repository;
-    $this->mimeTypeGuesser = $mime_type_guesser;
-  }
-
   /**
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    return new static(
-      $plugin_id,
-      $plugin_definition,
-      $configuration['field_definition'],
-      $configuration['settings'],
-      $configuration['third_party_settings'],
-      $container->get('entity_type.manager'),
-      $container->get('plugin.manager.entity_browser.field_widget_display'),
-      $container->get('config.factory'),
-      $container->get('entity_display.repository'),
-      $container->get('module_handler'),
-      $container->get('current_user'),
-      $container->get('file.mime_type.guesser'),
-      $container->get('messenger')
-    );
+    $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
+    $instance->configFactory = $container->get('config.factory');
+    $instance->mimeTypeGuesser = $container->get('file.mime_type.guesser');
+    return $instance;
   }
 
   /**
@@ -161,7 +95,7 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
       '#title' => $this->t('File view mode'),
       '#type' => 'select',
       '#default_value' => $this->getSetting('view_mode'),
-      '#options' => $this->displayRepository->getViewModeOptions('file'),
+      '#options' => $this->entityDisplayRepository->getViewModeOptions('file'),
       '#access' => $has_file_entity,
     ];
 
diff --git a/tests/modules/entity_browser_ief_test/config/install/core.entity_form_display.media.ief_media_type.default.yml b/tests/modules/entity_browser_ief_test/config/install/core.entity_form_display.media.ief_media_type.default.yml
index a89f545..267609d 100644
--- a/tests/modules/entity_browser_ief_test/config/install/core.entity_form_display.media.ief_media_type.default.yml
+++ b/tests/modules/entity_browser_ief_test/config/install/core.entity_form_display.media.ief_media_type.default.yml
@@ -17,6 +17,7 @@ content:
       entity_browser: ief_entity_browser_file
       field_widget_display: label
       field_widget_edit: true
+      field_widget_edit_form_mode: default
       field_widget_remove: true
       field_widget_replace: false
       open: true
diff --git a/tests/modules/entity_browser_test_entityqueue/config/install/core.entity_form_display.entity_subqueue.nodes.default.yml b/tests/modules/entity_browser_test_entityqueue/config/install/core.entity_form_display.entity_subqueue.nodes.default.yml
index e9c75d6..0ee64ff 100644
--- a/tests/modules/entity_browser_test_entityqueue/config/install/core.entity_form_display.entity_subqueue.nodes.default.yml
+++ b/tests/modules/entity_browser_test_entityqueue/config/install/core.entity_form_display.entity_subqueue.nodes.default.yml
@@ -20,6 +20,7 @@ content:
       entity_browser: widget_context_default_value
       field_widget_display: label
       field_widget_edit: true
+      field_widget_edit_form_mode: default
       field_widget_remove: true
       selection_mode: selection_append
       field_widget_replace: false
diff --git a/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.content_embed.default.yml b/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.content_embed.default.yml
index d09edbb..00d56b7 100644
--- a/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.content_embed.default.yml
+++ b/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.content_embed.default.yml
@@ -19,6 +19,7 @@ content:
       entity_browser: test_nodes
       field_widget_display: label
       field_widget_edit: true
+      field_widget_edit_form_mode: default
       field_widget_remove: true
       field_widget_replace: false
       selection_mode: selection_append
diff --git a/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.nested_paragraph.default.yml b/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.nested_paragraph.default.yml
index 2a817a9..f4cab07 100644
--- a/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.nested_paragraph.default.yml
+++ b/tests/modules/entity_browser_test_paragraphs/config/install/core.entity_form_display.paragraph.nested_paragraph.default.yml
@@ -18,6 +18,7 @@ content:
       entity_browser: test_nodes
       field_widget_display: label
       field_widget_edit: true
+      field_widget_edit_form_mode: default
       field_widget_remove: true
       field_widget_replace: false
       selection_mode: selection_append
diff --git a/tests/src/FunctionalJavascript/EntityBrowserTest.php b/tests/src/FunctionalJavascript/EntityBrowserTest.php
index f2bc387..e8ec708 100644
--- a/tests/src/FunctionalJavascript/EntityBrowserTest.php
+++ b/tests/src/FunctionalJavascript/EntityBrowserTest.php
@@ -38,10 +38,9 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     // Switch back to the main page.
     $this->getSession()->switchToIFrame();
     $this->waitForAjaxToFinish();
-    // Test the Edit functionality.
     $this->assertSession()->pageTextContains('llama.jpg');
-    $this->assertSession()->buttonExists('Edit');
-    // @TODO Test the edit button.
+    // Files have no form mode by default, so no Edit button is visible.
+    $this->assertSession()->buttonNotExists('Edit');
     // Test the Delete functionality.
     $this->assertSession()->buttonExists('Remove');
     $this->getSession()->getPage()->pressButton('Remove');
